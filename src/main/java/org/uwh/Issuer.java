/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.uwh;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Issuer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 303741705954231909L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Issuer\",\"namespace\":\"org.uwh\",\"fields\":[{\"name\":\"SMCI\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"UltimateParentSMCI\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Issuer> ENCODER =
      new BinaryMessageEncoder<Issuer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Issuer> DECODER =
      new BinaryMessageDecoder<Issuer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Issuer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Issuer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Issuer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Issuer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Issuer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Issuer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Issuer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Issuer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String SMCI;
   private java.lang.String Name;
   private java.lang.String UltimateParentSMCI;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Issuer() {}

  /**
   * All-args constructor.
   * @param SMCI The new value for SMCI
   * @param Name The new value for Name
   * @param UltimateParentSMCI The new value for UltimateParentSMCI
   */
  public Issuer(java.lang.String SMCI, java.lang.String Name, java.lang.String UltimateParentSMCI) {
    this.SMCI = SMCI;
    this.Name = Name;
    this.UltimateParentSMCI = UltimateParentSMCI;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SMCI;
    case 1: return Name;
    case 2: return UltimateParentSMCI;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SMCI = value$ != null ? value$.toString() : null; break;
    case 1: Name = value$ != null ? value$.toString() : null; break;
    case 2: UltimateParentSMCI = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'SMCI' field.
   * @return The value of the 'SMCI' field.
   */
  public java.lang.String getSMCI() {
    return SMCI;
  }


  /**
   * Sets the value of the 'SMCI' field.
   * @param value the value to set.
   */
  public void setSMCI(java.lang.String value) {
    this.SMCI = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public java.lang.String getName() {
    return Name;
  }


  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'UltimateParentSMCI' field.
   * @return The value of the 'UltimateParentSMCI' field.
   */
  public java.lang.String getUltimateParentSMCI() {
    return UltimateParentSMCI;
  }


  /**
   * Sets the value of the 'UltimateParentSMCI' field.
   * @param value the value to set.
   */
  public void setUltimateParentSMCI(java.lang.String value) {
    this.UltimateParentSMCI = value;
  }

  /**
   * Creates a new Issuer RecordBuilder.
   * @return A new Issuer RecordBuilder
   */
  public static org.uwh.Issuer.Builder newBuilder() {
    return new org.uwh.Issuer.Builder();
  }

  /**
   * Creates a new Issuer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Issuer RecordBuilder
   */
  public static org.uwh.Issuer.Builder newBuilder(org.uwh.Issuer.Builder other) {
    if (other == null) {
      return new org.uwh.Issuer.Builder();
    } else {
      return new org.uwh.Issuer.Builder(other);
    }
  }

  /**
   * Creates a new Issuer RecordBuilder by copying an existing Issuer instance.
   * @param other The existing instance to copy.
   * @return A new Issuer RecordBuilder
   */
  public static org.uwh.Issuer.Builder newBuilder(org.uwh.Issuer other) {
    if (other == null) {
      return new org.uwh.Issuer.Builder();
    } else {
      return new org.uwh.Issuer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Issuer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Issuer>
    implements org.apache.avro.data.RecordBuilder<Issuer> {

    private java.lang.String SMCI;
    private java.lang.String Name;
    private java.lang.String UltimateParentSMCI;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.uwh.Issuer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SMCI)) {
        this.SMCI = data().deepCopy(fields()[0].schema(), other.SMCI);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.UltimateParentSMCI)) {
        this.UltimateParentSMCI = data().deepCopy(fields()[2].schema(), other.UltimateParentSMCI);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Issuer instance
     * @param other The existing instance to copy.
     */
    private Builder(org.uwh.Issuer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.SMCI)) {
        this.SMCI = data().deepCopy(fields()[0].schema(), other.SMCI);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.UltimateParentSMCI)) {
        this.UltimateParentSMCI = data().deepCopy(fields()[2].schema(), other.UltimateParentSMCI);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'SMCI' field.
      * @return The value.
      */
    public java.lang.String getSMCI() {
      return SMCI;
    }


    /**
      * Sets the value of the 'SMCI' field.
      * @param value The value of 'SMCI'.
      * @return This builder.
      */
    public org.uwh.Issuer.Builder setSMCI(java.lang.String value) {
      validate(fields()[0], value);
      this.SMCI = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'SMCI' field has been set.
      * @return True if the 'SMCI' field has been set, false otherwise.
      */
    public boolean hasSMCI() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'SMCI' field.
      * @return This builder.
      */
    public org.uwh.Issuer.Builder clearSMCI() {
      SMCI = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return Name;
    }


    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public org.uwh.Issuer.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public org.uwh.Issuer.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'UltimateParentSMCI' field.
      * @return The value.
      */
    public java.lang.String getUltimateParentSMCI() {
      return UltimateParentSMCI;
    }


    /**
      * Sets the value of the 'UltimateParentSMCI' field.
      * @param value The value of 'UltimateParentSMCI'.
      * @return This builder.
      */
    public org.uwh.Issuer.Builder setUltimateParentSMCI(java.lang.String value) {
      validate(fields()[2], value);
      this.UltimateParentSMCI = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'UltimateParentSMCI' field has been set.
      * @return True if the 'UltimateParentSMCI' field has been set, false otherwise.
      */
    public boolean hasUltimateParentSMCI() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'UltimateParentSMCI' field.
      * @return This builder.
      */
    public org.uwh.Issuer.Builder clearUltimateParentSMCI() {
      UltimateParentSMCI = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Issuer build() {
      try {
        Issuer record = new Issuer();
        record.SMCI = fieldSetFlags()[0] ? this.SMCI : (java.lang.String) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (java.lang.String) defaultValue(fields()[1]);
        record.UltimateParentSMCI = fieldSetFlags()[2] ? this.UltimateParentSMCI : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Issuer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Issuer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Issuer>
    READER$ = (org.apache.avro.io.DatumReader<Issuer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.SMCI);

    out.writeString(this.Name);

    if (this.UltimateParentSMCI == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.UltimateParentSMCI);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.SMCI = in.readString();

      this.Name = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.UltimateParentSMCI = null;
      } else {
        this.UltimateParentSMCI = in.readString();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.SMCI = in.readString();
          break;

        case 1:
          this.Name = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.UltimateParentSMCI = null;
          } else {
            this.UltimateParentSMCI = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










