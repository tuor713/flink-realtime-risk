/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.uwh;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class IssuerRiskLine extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6171431194346658767L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IssuerRiskLine\",\"namespace\":\"org.uwh\",\"fields\":[{\"name\":\"SMCI\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"CR01\",\"type\":\"double\"},{\"name\":\"JTD\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IssuerRiskLine> ENCODER =
      new BinaryMessageEncoder<IssuerRiskLine>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IssuerRiskLine> DECODER =
      new BinaryMessageDecoder<IssuerRiskLine>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<IssuerRiskLine> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<IssuerRiskLine> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<IssuerRiskLine> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IssuerRiskLine>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this IssuerRiskLine to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a IssuerRiskLine from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a IssuerRiskLine instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static IssuerRiskLine fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String SMCI;
   private double CR01;
   private double JTD;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IssuerRiskLine() {}

  /**
   * All-args constructor.
   * @param SMCI The new value for SMCI
   * @param CR01 The new value for CR01
   * @param JTD The new value for JTD
   */
  public IssuerRiskLine(java.lang.String SMCI, java.lang.Double CR01, java.lang.Double JTD) {
    this.SMCI = SMCI;
    this.CR01 = CR01;
    this.JTD = JTD;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return SMCI;
    case 1: return CR01;
    case 2: return JTD;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: SMCI = value$ != null ? value$.toString() : null; break;
    case 1: CR01 = (java.lang.Double)value$; break;
    case 2: JTD = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'SMCI' field.
   * @return The value of the 'SMCI' field.
   */
  public java.lang.String getSMCI() {
    return SMCI;
  }


  /**
   * Sets the value of the 'SMCI' field.
   * @param value the value to set.
   */
  public void setSMCI(java.lang.String value) {
    this.SMCI = value;
  }

  /**
   * Gets the value of the 'CR01' field.
   * @return The value of the 'CR01' field.
   */
  public double getCR01() {
    return CR01;
  }


  /**
   * Sets the value of the 'CR01' field.
   * @param value the value to set.
   */
  public void setCR01(double value) {
    this.CR01 = value;
  }

  /**
   * Gets the value of the 'JTD' field.
   * @return The value of the 'JTD' field.
   */
  public double getJTD() {
    return JTD;
  }


  /**
   * Sets the value of the 'JTD' field.
   * @param value the value to set.
   */
  public void setJTD(double value) {
    this.JTD = value;
  }

  /**
   * Creates a new IssuerRiskLine RecordBuilder.
   * @return A new IssuerRiskLine RecordBuilder
   */
  public static org.uwh.IssuerRiskLine.Builder newBuilder() {
    return new org.uwh.IssuerRiskLine.Builder();
  }

  /**
   * Creates a new IssuerRiskLine RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IssuerRiskLine RecordBuilder
   */
  public static org.uwh.IssuerRiskLine.Builder newBuilder(org.uwh.IssuerRiskLine.Builder other) {
    if (other == null) {
      return new org.uwh.IssuerRiskLine.Builder();
    } else {
      return new org.uwh.IssuerRiskLine.Builder(other);
    }
  }

  /**
   * Creates a new IssuerRiskLine RecordBuilder by copying an existing IssuerRiskLine instance.
   * @param other The existing instance to copy.
   * @return A new IssuerRiskLine RecordBuilder
   */
  public static org.uwh.IssuerRiskLine.Builder newBuilder(org.uwh.IssuerRiskLine other) {
    if (other == null) {
      return new org.uwh.IssuerRiskLine.Builder();
    } else {
      return new org.uwh.IssuerRiskLine.Builder(other);
    }
  }

  /**
   * RecordBuilder for IssuerRiskLine instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IssuerRiskLine>
    implements org.apache.avro.data.RecordBuilder<IssuerRiskLine> {

    private java.lang.String SMCI;
    private double CR01;
    private double JTD;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.uwh.IssuerRiskLine.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SMCI)) {
        this.SMCI = data().deepCopy(fields()[0].schema(), other.SMCI);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.CR01)) {
        this.CR01 = data().deepCopy(fields()[1].schema(), other.CR01);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.JTD)) {
        this.JTD = data().deepCopy(fields()[2].schema(), other.JTD);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing IssuerRiskLine instance
     * @param other The existing instance to copy.
     */
    private Builder(org.uwh.IssuerRiskLine other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.SMCI)) {
        this.SMCI = data().deepCopy(fields()[0].schema(), other.SMCI);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CR01)) {
        this.CR01 = data().deepCopy(fields()[1].schema(), other.CR01);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.JTD)) {
        this.JTD = data().deepCopy(fields()[2].schema(), other.JTD);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'SMCI' field.
      * @return The value.
      */
    public java.lang.String getSMCI() {
      return SMCI;
    }


    /**
      * Sets the value of the 'SMCI' field.
      * @param value The value of 'SMCI'.
      * @return This builder.
      */
    public org.uwh.IssuerRiskLine.Builder setSMCI(java.lang.String value) {
      validate(fields()[0], value);
      this.SMCI = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'SMCI' field has been set.
      * @return True if the 'SMCI' field has been set, false otherwise.
      */
    public boolean hasSMCI() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'SMCI' field.
      * @return This builder.
      */
    public org.uwh.IssuerRiskLine.Builder clearSMCI() {
      SMCI = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CR01' field.
      * @return The value.
      */
    public double getCR01() {
      return CR01;
    }


    /**
      * Sets the value of the 'CR01' field.
      * @param value The value of 'CR01'.
      * @return This builder.
      */
    public org.uwh.IssuerRiskLine.Builder setCR01(double value) {
      validate(fields()[1], value);
      this.CR01 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CR01' field has been set.
      * @return True if the 'CR01' field has been set, false otherwise.
      */
    public boolean hasCR01() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CR01' field.
      * @return This builder.
      */
    public org.uwh.IssuerRiskLine.Builder clearCR01() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'JTD' field.
      * @return The value.
      */
    public double getJTD() {
      return JTD;
    }


    /**
      * Sets the value of the 'JTD' field.
      * @param value The value of 'JTD'.
      * @return This builder.
      */
    public org.uwh.IssuerRiskLine.Builder setJTD(double value) {
      validate(fields()[2], value);
      this.JTD = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'JTD' field has been set.
      * @return True if the 'JTD' field has been set, false otherwise.
      */
    public boolean hasJTD() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'JTD' field.
      * @return This builder.
      */
    public org.uwh.IssuerRiskLine.Builder clearJTD() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IssuerRiskLine build() {
      try {
        IssuerRiskLine record = new IssuerRiskLine();
        record.SMCI = fieldSetFlags()[0] ? this.SMCI : (java.lang.String) defaultValue(fields()[0]);
        record.CR01 = fieldSetFlags()[1] ? this.CR01 : (java.lang.Double) defaultValue(fields()[1]);
        record.JTD = fieldSetFlags()[2] ? this.JTD : (java.lang.Double) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IssuerRiskLine>
    WRITER$ = (org.apache.avro.io.DatumWriter<IssuerRiskLine>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IssuerRiskLine>
    READER$ = (org.apache.avro.io.DatumReader<IssuerRiskLine>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.SMCI);

    out.writeDouble(this.CR01);

    out.writeDouble(this.JTD);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.SMCI = in.readString();

      this.CR01 = in.readDouble();

      this.JTD = in.readDouble();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.SMCI = in.readString();
          break;

        case 1:
          this.CR01 = in.readDouble();
          break;

        case 2:
          this.JTD = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










