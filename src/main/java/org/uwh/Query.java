/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.uwh;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Query extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -934414432211796179L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Query\",\"namespace\":\"org.uwh\",\"fields\":[{\"name\":\"Select\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"Ids\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"Where\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Query> ENCODER =
      new BinaryMessageEncoder<Query>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Query> DECODER =
      new BinaryMessageDecoder<Query>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Query> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Query> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Query> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Query>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Query to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Query from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Query instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Query fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<java.lang.String> Select;
   private java.util.List<java.lang.String> Ids;
   private java.util.Map<java.lang.String,java.util.List<java.lang.String>> Where;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Query() {}

  /**
   * All-args constructor.
   * @param Select The new value for Select
   * @param Ids The new value for Ids
   * @param Where The new value for Where
   */
  public Query(java.util.List<java.lang.String> Select, java.util.List<java.lang.String> Ids, java.util.Map<java.lang.String,java.util.List<java.lang.String>> Where) {
    this.Select = Select;
    this.Ids = Ids;
    this.Where = Where;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Select;
    case 1: return Ids;
    case 2: return Where;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Select = (java.util.List<java.lang.String>)value$; break;
    case 1: Ids = (java.util.List<java.lang.String>)value$; break;
    case 2: Where = (java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Select' field.
   * @return The value of the 'Select' field.
   */
  public java.util.List<java.lang.String> getSelect() {
    return Select;
  }


  /**
   * Sets the value of the 'Select' field.
   * @param value the value to set.
   */
  public void setSelect(java.util.List<java.lang.String> value) {
    this.Select = value;
  }

  /**
   * Gets the value of the 'Ids' field.
   * @return The value of the 'Ids' field.
   */
  public java.util.List<java.lang.String> getIds() {
    return Ids;
  }


  /**
   * Sets the value of the 'Ids' field.
   * @param value the value to set.
   */
  public void setIds(java.util.List<java.lang.String> value) {
    this.Ids = value;
  }

  /**
   * Gets the value of the 'Where' field.
   * @return The value of the 'Where' field.
   */
  public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getWhere() {
    return Where;
  }


  /**
   * Sets the value of the 'Where' field.
   * @param value the value to set.
   */
  public void setWhere(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
    this.Where = value;
  }

  /**
   * Creates a new Query RecordBuilder.
   * @return A new Query RecordBuilder
   */
  public static org.uwh.Query.Builder newBuilder() {
    return new org.uwh.Query.Builder();
  }

  /**
   * Creates a new Query RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Query RecordBuilder
   */
  public static org.uwh.Query.Builder newBuilder(org.uwh.Query.Builder other) {
    if (other == null) {
      return new org.uwh.Query.Builder();
    } else {
      return new org.uwh.Query.Builder(other);
    }
  }

  /**
   * Creates a new Query RecordBuilder by copying an existing Query instance.
   * @param other The existing instance to copy.
   * @return A new Query RecordBuilder
   */
  public static org.uwh.Query.Builder newBuilder(org.uwh.Query other) {
    if (other == null) {
      return new org.uwh.Query.Builder();
    } else {
      return new org.uwh.Query.Builder(other);
    }
  }

  /**
   * RecordBuilder for Query instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Query>
    implements org.apache.avro.data.RecordBuilder<Query> {

    private java.util.List<java.lang.String> Select;
    private java.util.List<java.lang.String> Ids;
    private java.util.Map<java.lang.String,java.util.List<java.lang.String>> Where;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.uwh.Query.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Select)) {
        this.Select = data().deepCopy(fields()[0].schema(), other.Select);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.Ids)) {
        this.Ids = data().deepCopy(fields()[1].schema(), other.Ids);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Where)) {
        this.Where = data().deepCopy(fields()[2].schema(), other.Where);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Query instance
     * @param other The existing instance to copy.
     */
    private Builder(org.uwh.Query other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Select)) {
        this.Select = data().deepCopy(fields()[0].schema(), other.Select);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Ids)) {
        this.Ids = data().deepCopy(fields()[1].schema(), other.Ids);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Where)) {
        this.Where = data().deepCopy(fields()[2].schema(), other.Where);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Select' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getSelect() {
      return Select;
    }


    /**
      * Sets the value of the 'Select' field.
      * @param value The value of 'Select'.
      * @return This builder.
      */
    public org.uwh.Query.Builder setSelect(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.Select = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Select' field has been set.
      * @return True if the 'Select' field has been set, false otherwise.
      */
    public boolean hasSelect() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Select' field.
      * @return This builder.
      */
    public org.uwh.Query.Builder clearSelect() {
      Select = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Ids' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getIds() {
      return Ids;
    }


    /**
      * Sets the value of the 'Ids' field.
      * @param value The value of 'Ids'.
      * @return This builder.
      */
    public org.uwh.Query.Builder setIds(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.Ids = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Ids' field has been set.
      * @return True if the 'Ids' field has been set, false otherwise.
      */
    public boolean hasIds() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Ids' field.
      * @return This builder.
      */
    public org.uwh.Query.Builder clearIds() {
      Ids = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Where' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getWhere() {
      return Where;
    }


    /**
      * Sets the value of the 'Where' field.
      * @param value The value of 'Where'.
      * @return This builder.
      */
    public org.uwh.Query.Builder setWhere(java.util.Map<java.lang.String,java.util.List<java.lang.String>> value) {
      validate(fields()[2], value);
      this.Where = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Where' field has been set.
      * @return True if the 'Where' field has been set, false otherwise.
      */
    public boolean hasWhere() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Where' field.
      * @return This builder.
      */
    public org.uwh.Query.Builder clearWhere() {
      Where = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Query build() {
      try {
        Query record = new Query();
        record.Select = fieldSetFlags()[0] ? this.Select : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.Ids = fieldSetFlags()[1] ? this.Ids : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.Where = fieldSetFlags()[2] ? this.Where : (java.util.Map<java.lang.String,java.util.List<java.lang.String>>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Query>
    WRITER$ = (org.apache.avro.io.DatumWriter<Query>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Query>
    READER$ = (org.apache.avro.io.DatumReader<Query>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.Select.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.Select) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.Ids.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.String e1: this.Ids) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.Where.size();
    out.writeMapStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> e2: this.Where.entrySet()) {
      actualSize2++;
      out.startItem();
      out.writeString(e2.getKey());
      java.util.List<java.lang.String> v2 = e2.getValue();
      long size3 = v2.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.lang.String e3: v2) {
        actualSize3++;
        out.startItem();
        out.writeString(e3);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }
    out.writeMapEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.Select;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("Select").schema());
        this.Select = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.String> a1 = this.Ids;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("Ids").schema());
        this.Ids = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString();
          a1.add(e1);
        }
      }

      long size2 = in.readMapStart();
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> m2 = this.Where; // Need fresh name due to limitation of macro system
      if (m2 == null) {
        m2 = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>((int)size2);
        this.Where = m2;
      } else m2.clear();
      for ( ; 0 < size2; size2 = in.mapNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.String k2 = null;
          k2 = in.readString();
          java.util.List<java.lang.String> v2 = null;
          long size3 = in.readArrayStart();
          java.util.List<java.lang.String> a3 = v2;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.String>((int)size3, SCHEMA$.getField("Where").schema().getValueType());
            v2 = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.String> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.String e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readString();
              a3.add(e3);
            }
          }
          m2.put(k2, v2);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.Select;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("Select").schema());
            this.Select = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.String> a1 = this.Ids;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("Ids").schema());
            this.Ids = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString();
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readMapStart();
          java.util.Map<java.lang.String,java.util.List<java.lang.String>> m2 = this.Where; // Need fresh name due to limitation of macro system
          if (m2 == null) {
            m2 = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>((int)size2);
            this.Where = m2;
          } else m2.clear();
          for ( ; 0 < size2; size2 = in.mapNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.String k2 = null;
              k2 = in.readString();
              java.util.List<java.lang.String> v2 = null;
              long size3 = in.readArrayStart();
              java.util.List<java.lang.String> a3 = v2;
              if (a3 == null) {
                a3 = new SpecificData.Array<java.lang.String>((int)size3, SCHEMA$.getField("Where").schema().getValueType());
                v2 = a3;
              } else a3.clear();
              SpecificData.Array<java.lang.String> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a3 : null);
              for ( ; 0 < size3; size3 = in.arrayNext()) {
                for ( ; size3 != 0; size3--) {
                  java.lang.String e3 = (ga3 != null ? ga3.peek() : null);
                  e3 = in.readString();
                  a3.add(e3);
                }
              }
              m2.put(k2, v2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










